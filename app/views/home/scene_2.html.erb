<!DOCTYPE html>
<html lang="ja">
<%= stylesheet_link_tag 'scene_1', media: 'all', 'data-turbolinks-track': 'reload'%>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>恋愛面接</title>
</head>

<body>
    <div class="canvas_wrapper_scene_1">
        <div class = "background">
            <canvas id="BackgroundCanvas" width="921px" height="519px" style="background-color: #D9D9D9;"></canvas>
        </div>

        <div class = "gameBackground">
            <canvas id="GameBackgroundCanvas" width="921px" height="519px"></canvas>
        </div>

        <div class = "character">
            <canvas id="CharacterCanvas_scene_1" width="921px" height="519px"></canvas>
        </div>

        <div class="message-window">
            <canvas id="MessageWindowCanvas" width="921px" height="519px"></canvas>
            <div class="message-box">メッセージウィンドウ</div>
        </div>

        <div class="input_window_scene_1">

                <form class="input_form" id="InputForm">
                    <input id="message_input" placeholder='返答を記入してください' required>
                    <canvas id="InputWindowCanvas_scene_1" width="921px" height="519px"></canvas>
                </form>

                <form class="clicbutom" id="clicButton">
                    <button id="select_1">選択肢1</button>
                    <button id="select_2">選択肢2</button> 
                </form>
        </div>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            var background_canvas = document.getElementById('BackgroundCanvas');
            var game_background_canvas = document.getElementById('GameBackgroundCanvas');
            var character_canvas = document.getElementById('CharacterCanvas_scene_1');
            var message_window_canvas = document.getElementById('MessageWindowCanvas');
            var input_window_canvas = document.getElementById('InputWindowCanvas_scene_1');
            var input_condition = 0;

            const  input_txet = document.getElementById('InputForm') 
            const  input_button = document.getElementById('clicButton') 
            input_txet.style.visibility = 'hidden';

            var imagePaths = [
                                    '<%= asset_path("/girl_normal.png") %>',
                                    '<%= asset_path("/girl_smile.png") %>',
                                    '<%= asset_path("/girl_angry.png") %>'
            ];

            function drawImageOnCanvas(canvas, imageSrc, x, y, width, height) {
                var ctx = canvas.getContext('2d');
                var img = new Image();
                img.src = imageSrc;
                img.onload = function() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, x, y, width, height);
                }
            }

            if (background_canvas) {
                var background_ctx = background_canvas.getContext('2d');
            }

            if (game_background_canvas) {
                var game_background_ctx = game_background_canvas.getContext('2d');

                // Canvasのサイズを設定
                game_background_canvas.width = game_background_canvas.offsetWidth;
                game_background_canvas.height = game_background_canvas.offsetHeight;

                // 背景画像を描画
                var game_background_img = new Image();
                game_background_img.src = '<%= asset_path("/game_background_scene_1_v2.png") %>';  // 背景画像のパスを指定
                game_background_img.onload = function() {
                    game_background_ctx.drawImage(game_background_img, 136, 26);
                }
            }

            if (message_window_canvas) {
                var message_window_ctx = message_window_canvas.getContext('2d');

                // Canvasのサイズを設定
                message_window_canvas.width = message_window_canvas.offsetWidth;
                message_window_canvas.height = message_window_canvas.offsetHeight;

                // 背景画像を描画
                var message_window_img = new Image();
                message_window_img.src = '<%= asset_path("/messagewindow_v2.png") %>';  // 背景画像のパスを指定
                message_window_img.onload = function() {
                    message_window_ctx.drawImage(message_window_img, 201, 263);
                    fetchMessages();
                }
            }

            if (input_window_canvas) {
                var input_window_ctx = input_window_canvas.getContext('2d');

                // Canvasのサイズを設定
                input_window_canvas.width = input_window_canvas.offsetWidth;
                input_window_canvas.height = input_window_canvas.offsetHeight;

                // 背景画像を描画
                var input_window_img = new Image();
                input_window_img.src = '<%= asset_path("/inputwindow.png") %>';  // 背景画像のパスを指定
                input_window_img.onload = function() {
                    input_window_ctx.drawImage(input_window_img, 201, 412);
                }

            }

            document.getElementById('InputForm').addEventListener('submit', function(event) {
                event.preventDefault();
                var userInput = document.getElementById('message_input').value;
                var form = document.getElementById('InputForm');

                if (character_canvas) {
                    var character_ctx = character_canvas.getContext('2d');
                    // 配列からランダムに画像パスを取得
                    var randomIndex = Math.floor(Math.random() * imagePaths.length);
                    var selectedImagePath = imagePaths[randomIndex];

                    // Canvasのサイズを設定
                    character_canvas.width = character_canvas.offsetWidth;
                    character_canvas.height = character_canvas.offsetHeight;

                    // 背景画像を描画
                    var character_img = new Image();
                    character_img.src = selectedImagePath;  // 背景画像のパスを指定
                    character_img.onload = function() {
                        character_ctx.drawImage(character_img, 362, 70, 238, 228);
                    }
                }

                form.reset();

            });

            document.getElementById('select_1').addEventListener('click', function(event) {
                event.preventDefault();
                // 配列からランダムに画像パスを取得
                var randomIndex = Math.floor(Math.random() * imagePaths.length);
                var selectedImagePath = imagePaths[randomIndex];

                input_button.style.visibility = 'hidden';
                input_txet.style.visibility = 'visible';

                var game_background_ctx = game_background_canvas.getContext('2d');
                    game_background_img.src = '<%= asset_path("/game_background_scene2.png") %>'; // 変更後の画像パス
                    game_background_img.onload = function() {
                        game_background_ctx.clearRect(0, 0, game_background_canvas.width, game_background_canvas.height);
                        game_background_ctx.drawImage(game_background_img, 136, 26, 648, 365);
                    }

                if (character_canvas) {
                    var character_ctx = character_canvas.getContext('2d');

                    // Canvasのサイズを設定
                    character_canvas.width = character_canvas.offsetWidth;
                    character_canvas.height = character_canvas.offsetHeight;

                    // 背景画像を描画
                    var character_img = new Image();
                    character_img.src = selectedImagePath;  // 背景画像のパスを指定
                    character_img.onload = function() {
                        character_ctx.drawImage(character_img, 362, 70, 238, 228);
                    }
                }
            });

            let messages = [];
            let currentMessageIndex = 0;

            function fetchMessages() {
                fetch('/huckson_test_story.txt')
                    .then(response => response.text())
                    .then(data => {
                        const lines = data.split('\n');
                        lines.forEach(line => {
                            const [name, message] = line.split('：');
                            messages.push({ name, message });
                        });
                        displayMessage(messages[currentMessageIndex].name, messages[currentMessageIndex].message);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            }

            function displayMessage(name, message) {
                var message_window_ctx = message_window_canvas.getContext('2d');
                

                message_window_ctx.font = '20px sans-serif';
                message_window_ctx.fillStyle = 'black';
                var textHeight = 20;

                message_window_ctx.fillText(name, 200 + 20, 249 + 40);

                message_window_ctx.font = "16px SeoulNamsan";
                var maxWidth = 550 - 40;
                var wrappedText = wrapText(message_window_ctx, message, maxWidth);

                var charIndex = 0;
                var lineIndex = 0;

                var x = 200 + 15;
                var y = 249 + 69;

                function drawNextChar() {
                    if (lineIndex < wrappedText.length) {
                        if (charIndex < wrappedText[lineIndex].length) {
                            message_window_ctx.fillText(wrappedText[lineIndex][charIndex], x, y);
                            charIndex++;
                            x += message_window_ctx.measureText(wrappedText[lineIndex][charIndex - 1]).width;
                            setTimeout(drawNextChar, 30); // 30ミリ秒ごとに次の文字を描画
                        } else {
                            charIndex = 0;
                            lineIndex++;
                            x = 201 + 15;
                            y += textHeight;
                            setTimeout(drawNextChar, 30);
                        }
                    }
                }
                drawNextChar();
            }

            function wrapText(context, text, maxWidth) {
                var lines = [];
                var currentLine = '';
                for (var i = 0; i < text.length; i++) {
                    var char = text[i];
                    var testLine = currentLine + char;
                    var width = context.measureText(testLine).width;
                    if (width > maxWidth && currentLine !== '') {
                        lines.push(currentLine);
                        currentLine = char;
                    } else {
                        currentLine = testLine;
                    }
                }
                lines.push(currentLine);
                return lines;
            }

            let enterFlag = false;

            document.addEventListener('keydown', function (event) {
                if (event.key === 'Enter') {
                    enterFlag = !enterFlag;
                    currentMessageIndex++;
                    message_window_ctx.clearRect(0, 0, message_window_canvas.width, message_window_canvas.height);
                    message_window_ctx.drawImage(message_window_img, 201, 263);
                    if (currentMessageIndex < messages.length) {
                        fetchMessages(messages[currentMessageIndex].name, messages[currentMessageIndex].message);
                    } else {
                        console.log('No more messages.');
                    }
                    if (enterFlag) {
                        simulateEnterKey();
                    }
                }
            });

            function simulateEnterKey() {
            const event = new KeyboardEvent('keydown', {
                key: 'Enter',
                keyCode: 13,
                code: 'Enter',
                which: 13,
                shiftKey: false,
                ctrlKey: false,
                metaKey: false
            });
            document.dispatchEvent(event);
        }
        });
    </script>
</body>

</html>
